# -*- coding: utf-8 -*-
"""
本模块封装了对 Microsoft Edge 在线文本转语音服务的调用。

**工作原理**:
此模块并非直接通过 API 调用，而是作为 `edge-tts` 这个第三方 Python 库的命令行接口的包装器。
它通过 `subprocess` 模块在后台执行 `edge-tts` 命令来生成音频。

**功能**:
- 从 `config.yaml` 配置文件中加载所需的声音名称 (voice)。
- 自动创建保存音频文件的目录。
- 调用 `edge-tts` 命令行工具，将文本转换为 MP3 音频文件。
- 提供了详细的错误处理机制，能捕获并报告 `edge-tts` 未安装或执行失败等问题。

**前置依赖**:
在运行此模块之前，必须确保 `edge-tts` 库已经安装在您的 Python 环境中。
您可以通过以下命令进行安装:
```bash
pip install edge-tts
```

**如何获取可用声音列表**:
在命令行中运行 `edge-tts --list-voices` 可以查看所有支持的声音及其代码。

**常用声音示例**:
-   **中文女声**: `zh-CN-XiaoxiaoNeural`
-   **中文男声**: `zh-CN-YunxiNeural`
-   **美国英文女声**: `en-US-JennyNeural`
-   **英国英文女声**: `en-GB-SoniaNeural`
"""

# 导入标准库
from pathlib import Path  # 用于处理文件路径
import subprocess  # 用于执行外部命令

# 导入项目内部模块
from core.utils import load_key, rprint  # 用于加载配置和格式化输出

def edge_tts(text: str, save_path: str) -> bool:
    """
    使用 Microsoft Edge 的在线文本转语音服务 (edge-tts) 将文本转换为语音。
    该函数通过调用 `edge-tts` 命令行工具来实现。

    Args:
        text (str): 需要转换为语音的文本。
        save_path (str): 生成的音频文件的保存路径。

    Returns:
        bool: 成功返回 True，失败返回 False。
    """
    try:
        # 1. 从配置文件加载 Edge TTS 的相关设置
        #    如果 `config.yaml` 中没有 `edge_tts` 或 `voice` 配置，则使用默认值。
        edge_set = load_key("edge_tts") or {}
        voice = edge_set.get("voice", "zh-CN-XiaoxiaoNeural") # 默认使用中文女声
        
        # 2. 确保保存音频的目录存在
        speech_file_path = Path(save_path)
        speech_file_path.parent.mkdir(parents=True, exist_ok=True)
        
        # 3. 构建要执行的命令行命令
        #    'edge-tts'      - 主命令
        #    '--voice'       - 指定使用的声音
        #    '--text'        - 指定要转换的文本
        #    '--write-media' - 指定输出的音频文件路径
        cmd = ["edge-tts", "--voice", voice, "--text", text, "--write-media", str(speech_file_path)]
        
        # 4. 使用 subprocess.run 执行命令
        #    - `check=True`: 如果命令返回非零退出码（即发生错误），则会抛出 CalledProcessError 异常。
        #    - `capture_output=True`, `text=True`: 捕获命令的标准输出和标准错误，并以文本形式解码。
        result = subprocess.run(cmd, check=True, capture_output=True, text=True, encoding='utf-8')
        
        # rprint(f"[green]Edge TTS 音频已保存到: {speech_file_path}")
        return True

    except FileNotFoundError:
        rprint("[red]错误: `edge-tts` 命令未找到。")
        rprint("[yellow]请确保您已经通过 `pip install edge-tts` 安装了该库，并且它在系统的 PATH 环境变量中。")
        return False
    except subprocess.CalledProcessError as e:
        rprint(f"[red]调用 `edge-tts` 时发生错误，返回码: {e.returncode}")
        rprint(f"[red]错误输出:\n{e.stderr}")
        return False
    except Exception as e:
        rprint(f"[red]执行 Edge TTS 时发生未知错误: {e}")
        return False

# --- 测试代码 ---
if __name__ == "__main__":
    # 当该脚本作为主程序运行时，执行以下测试代码
    # 这对于独立调试您的 edge_tts 函数非常有用。
    rprint("--- 开始测试 Edge TTS 功能 ---")
    rprint("注意: 此测试依赖于 `config.yaml` 中 `edge_tts.voice` 的配置。")
    rprint("如果遇到语言不匹配的错误，请检查您的配置。")

    # 测试用例1: 中文
    rprint("\n[cyan]测试1: 生成中文语音...[/cyan]")
    success_cn = edge_tts("你好，欢迎使用 VideoLingo！这是一个由 Edge TTS 生成的测试音频。", "edge_tts_test_cn.mp3")
    if success_cn:
        rprint("[green]✅ 中文语音测试成功，请检查 edge_tts_test_cn.mp3 文件。")
    else:
        rprint("[red]❌ 中文语音测试失败。请检查上述错误日志。")

    # 测试用例2: 英文
    rprint("\n[cyan]测试2: 生成英文语音...[/cyan]")
    rprint("提示: 此测试需要将 `edge_tts.voice` 配置为英文声音，例如 `en-US-JennyNeural`。")
    success_en = edge_tts("Hello, welcome to VideoLingo! This is a test audio generated by Edge TTS.", "edge_tts_test_en.mp3")
    if success_en:
        rprint("[green]✅ 英文语音测试成功，请检查 edge_tts_test_en.mp3 文件。")
    else:
        rprint("[red]❌ 英文语音测试失败。请检查您的声音配置是否正确。")
    
    rprint("\n--- 测试结束 ---")

